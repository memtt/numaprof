#!/bin/sh
######################################################
#            PROJECT  : numaprof                     #
#            VERSION  : 1.1.0-dev                    #
#            DATE     : 02/2018                      #
#            AUTHOR   : Valat Sébastien  - CERN      #
#            LICENSE  : CeCILL-C                     #
######################################################

set -e

######################################################
# This script provide a simple wrapper to cmake to fix
# the missing --help equivalent to autotools. And it
# may be more intuitive for users to use the well
# known ./configure & make & make install procedure.

######################################################
#script setup
CFG_PROJECT_NAME='numaprof'
CFG_DEFAULT_BUILD_TYPE='Release'
CFG_DEFAULT_PREFIX='/usr/local'
#compiler default flags
CFG_EXTRA_CC=''
CFG_EXTRA_CXX=''
CFG_EXTRA_CFLAGS="${CFLAGS}"
CFG_EXTRA_CXXFLAGS="${CXXFLAGS}"
CFG_EXTRA_LDFLAGS="${LDFLAGS}"
# State variables
CFG_CMAKE_COMMAND='cmake'
#features
CFG_LIB_SUFFIX=''
#help formatting
CFG_HELP_OPT_LENGTH=23

######################################################
CFG_TMP='/tmp'
CFG_FEATURES_HELP_FILE="`mktemp ${CFG_TMP}/configure_help_enable_disable.XXXXXXXXXX`"
CFG_CASE_PARSE_OPT_FILE="`mktemp ${CFG_TMP}/configure_case_parse_opt.XXXXXXXXXX`"
CFG_CMAKE_OPTS_FILE="`mktemp ${CFG_TMP}/configure_cmake_opts.XXXXXXXXXX`"

######################################################
#Find default source dir
CFG_SOURCE_DIR="$PWD/`dirname \"$0\"`"

######################################################
#function defining all the options available to configure the project
cfg_setup_options()
{
	#debug
	cfg_add_enable_option --name='debug' \
	                      --on-enable='-DCMAKE_BUILD_TYPE=Debug' \
	                      --on-disable='-DCMAKE_BUILD_TYPE=Release' \
	                      --doc='Enable debugging support (-DCMAKE_BUILD_TYPE=Debug).'
	#test
	cfg_add_enable_option --name='test' \
	                      --on='-DENABLE_TESTS=${ON}' \
	                      --doc='Disable unit tests' \
	                      --invert-help
	#gcc test coverage
	cfg_add_enable_option --name='gcc-coverage'  \
	                      --on='-DENABLE_GCC_COVERAGE=${ON}' \
	                      --doc='Enable GCC option to generate test coverage of the lib.' \
	#junit xml out
	cfg_add_enable_option --name='junit-output'  \
	                      --on='-DENABLE_JUNIT_OUTPUT=${ON}' \
	                      --doc='Save test output in JUnit format (only in self-test mode).' 
	#valgrind
	cfg_add_enable_option --name='valgrind' \
	                      --on='-DENABLE_VALGRIND=${ON}' \
	                      --doc 'Enable running unit tests into valgrind to generate reports.'
	#jenkins full features
	cfg_add_enable_option --name='jenkins' \
	                      --on-enable-inherit='--enable-valgrind --enable-junit-output --enable-debug "CXXFLAGS=-Wall -fprofile-arcs -ftest-coverage"' \
	                      --doc='Enable all checking modes (unit, valgrind, coverage...).' \
	                      --only='enable'
	#webview
	cfg_add_enable_option --name='webview' \
	                      --on='-DENABLE_WEBVIEW=${ON}' \
	                      --doc='Disable installation of webview (-DENABLE_WEBVIEW=no).'
	#ninja
	cfg_add_enable_option --name='ninja' \
	                      --on-enable='-GNinja' \
	                      --doc='Enable usage of Ninja with cmake instead of Make.' \
						  --only=enable
}

######################################################
cfg_exit()
{
	#cat "${CFG_CASE_PARSE_OPT_FILE}"
	cat "${CFG_CMAKE_OPTS_FILE}"
	rm -f "${CFG_FEATURES_HELP_FILE}"
	rm -f "${CFG_CASE_PARSE_OPT_FILE}"
	rm -f "${CFG_CMAKE_OPTS_FILE}"
	exit $1
}

######################################################
cfg_fail()
{
	echo "$@" 1>&2
	cfg_exit 1
}

######################################################
# add value to variable with space as separator
#  - $1 : variable name
#  - $2 : value to add
cfg_add_to_var()
{
	#vars
	var="${1}"
	value="${2}"
	eval "cur=\"\$${var}\""

	echo "${var} => ${cur} => ${value}"

	#concat
	if test -z "${cur}"; then
		final="${value}"
	else
		final="${cur} ${value}"
	fi

	#export
	eval "${var}=\"${final}\""
}

######################################################
# Add an --enable-*|--disable-* option to the list of available options.
# The command take a command line like parameters to setup the option :
#
# Params:
#  --name={NAME}           Provide option name (will be added to --enable-{NAME} and --sidable-{NAME})
#  --doc={DOC}             Provide documentation string for --help
#  --on-enable={OPT}       Add a cmake option to the option list when --enable-{NAME} is triggered
#  --on-diable={OPT}       Add a cmake option to the option list when --enable-{NAME} is triggered
#  --on={-DVAR=${ON}}      Setup the given cmake variable to ON/OFF depending on the enable/disable.
#  --on-enable-inherit={}  List of inherited configure option to trigger when used.
#  --on-disable-inherit={} List of inherited configure option to trigger when used.
#  --invert-help           In help message, do it for disable instead of enable.
#  --only={enable|disable} Provide only one of the two command.
#
# In commands you can use variables :
#  ${ON}                   Will be 'ON' on enable and 'OFF' on disable
#  ${OFF}                  Will be 'OFF' on enable and 'ON' on disable
#  ${ENABLE}               Will be 'ENABLE' on enable and 'DISABLE' on disable
#  ${DISABLE}              Will be 'DISABLE' on enable and 'ENABLE' on disable
cfg_add_enable_option()
{
	#vars
	opt_help_mode='enable'
	opt_mode='both'
	opt_enable=''
	opt_disable=''

	#scan options
	for opt in "$@"
	do
		#extract
		v=`echo $opt | cut -f 2- -d =`

		#case
		case $opt in
			--name=*)
				opt_name="${v}"
				;;
			--doc=*)
				opt_doc="${v}"
				;;
			--on-enable=*)
				opt_enable="cfg_push_cmake_opt \"${v}\""
				;;
			--on-disable=*)
				opt_disable="cfg_push_cmake_opt \"${v}\""
				;;
			--on=*)
				opt_enable="cfg_push_cmake_opt \"${v}\""
				opt_disable="cfg_push_cmake_opt \"${v}\""
				;;
			--on-enable-inherit=*)
				opt_enable="cfg_parse_global_args ${v}"
				;;
			--on-disable-inherit=*)
				opt_disable="cfg_parse_global_args ${v}"
				;;
			--invert-help)
				opt_help_mode='disable'
				;;
			--only=enable|--only=disable)
				opt_help_mode="${v}"
				opt_mode="${v}"
				;;
			*)
				#cfg_fail "Invalid internal option to build enable option ${opt} while calling cfg_add_enable_option()"
				;;
		esac
	done

	#generate doc
	printf "   --%-${CFG_HELP_OPT_LENGTH}s %s\n" "${opt_mode}-${opt_name}" "${opt_doc}" >> ${CFG_FEATURES_HELP_FILE}

	#generate enable action
	if test ! -z "${opt_enable}"; then
		if test "${opt_mode}" = "both" || test "${opt_mode}" = "enable"; then
			echo "			--enable-${opt_name})" >> ${CFG_CASE_PARSE_OPT_FILE}
			echo "				${opt_enable}" >> ${CFG_CASE_PARSE_OPT_FILE}
			echo "				;;" >> ${CFG_CASE_PARSE_OPT_FILE}
		fi
	fi

	#generate disable action
	if test ! -z "${opt_disable}"; then
		if test "${opt_mode}" = "both" || test "${opt_mode}" = "disable"; then
			echo "			--disable-${opt_name})" >> ${CFG_CASE_PARSE_OPT_FILE}
			echo "				${opt_disable}" >> ${CFG_CASE_PARSE_OPT_FILE}
			echo "				;;" >> ${CFG_CASE_PARSE_OPT_FILE}
		fi
	fi
}

######################################################
CFG_PARSE_OPT_HEADER="#!/bin/sh

cfg_parse_user_opts()
{
	for user_opt in \"\$@\"
	do
		case \$user_opt in"
CFG_PARSE_OPT_FOOTER="
			*)
				return 1
				;;
		esac
	done
}
"

######################################################
#build configuration
echo "${CFG_PARSE_OPT_HEADER}" > ${CFG_CASE_PARSE_OPT_FILE}
cfg_setup_options
echo "${CFG_PARSE_OPT_FOOTER}" >> ${CFG_CASE_PARSE_OPT_FILE}
. ${CFG_CASE_PARSE_OPT_FILE}

######################################################
CFG_HELP_MESSAGE="'configure' is a cmake wrapper to build ${CFG_PROJECT_NAME}
For more control, prefer to use cmake directely, this wrapper only aims
to ease your life for standard cases.

Usage: ./configure [OPTION]... [VAR=VALUE]...

To assign environment variables (e.g., CC, CFLAGS...), specify them as
VAR=VALUE.  See below for descriptions of some of the useful variables.

Defaults for the options are specified in brackets.

Configuration:
  -h, --help                 display this help and exit
      --srcdir=DIR           find the sources in DIR [configure dir or '${CFG_SOURCE_DIR}']

Installation directories:
   --prefix=PREFIX           install files in PREFIX [${CFG_DEFAULT_PREFIX}]
   --lib-suffix=SUFFIX       used to force suffix for lib directory eg. lib64. [empty].

By default, 'make install' will install all the files in
'/usr/local/bin', '/usr/local/lib' etc.  You can specify
an installation prefix other than '/usr/local' using '--prefix',
for instance '--prefix=$HOME/usr'.

Optional Features:
`cat ${CFG_FEATURES_HELP_FILE}`

To find libs and commands :
   --with-cmake={command}    Define the cmake command to use [cmake].
   --with-mpicxx={cmd}       Define the MPI compiler to use [mpicxx].
   --with-hwloc={prefix}     Define prefix to find hwloc [/usr].
   --with-numactl={perfix}   Define prefix of numactl/libnuma [/usr]
   --with-pintool={prefix}   Define prefix of pintool (REQUIRED).
   --without-pintool         Skip pintool check for continuous integration.

To get the generated cmake command :
   --show                  Display the cmake command and didn't execute it.

Extra cmake option:
   -D{VARNAME}={VALUE}       Transmit direct cmake options in cmake format.

Some influential environment variables:
   LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
               nonstandard directory <lib dir>
   CC          C compiler command
   CFLAGS      C compiler flags
   CXX         C++ compiler command
   CXXFLAGS    C++ compiler flags"

######################################################
cfg_push_cmake_opt()
{
	echo "$@" >> ${CFG_CMAKE_OPTS_FILE}
}

######################################################
#parse arguments
cfg_parse_global_args()
{
	for arg in "$@"
	do
		#extract
		val="`echo \"$arg\" | cut -f 2- -d =`"
		case $arg in
			--enable-*)
				ON='ON'
				OFF='OFF'
				;;
			--disable-*)
				ON='OFF'
				OFF='ON'
				;;
		esac

		#loop on args
		case "$arg" in
			-h | --help)
				echo "$CFG_HELP_MESSAGE"
				cfg_exit 0
				;;
			--prefix=*)
				cfg_push_cmake_opt "-DCMAKE_INSTALL_PREFIX=$val"
				;;
			--srcdir=*)
				SOURCE_DIR="`get_arg_value \"$arg\" --srcdir`"
				;;
			--lib-suffix=*)
				LIB_SUFFIX="`get_arg_value \"$arg\" --lib-suffix`"
				if [ ! -z "${LIB_SUFFIX}" ]; then LIB_SUFFIX="-DLIB_SUFFIX=${LIB_SUFFIX}"; fi
				;;
			--with-cmake=*)
				CMAKE="`get_arg_value \"$arg\" --with-cmake`"
				;;
			--with-mpicxx=*)
				MPI_CXX_COMPILER="-DMPI_CXX_COMPILER=`get_arg_value \"$arg\" --with-mpicxx`"
				;;
			--with-hwloc=*)
				HWLOC_PREFIX="-DHWLOC_PREFIX=`get_arg_value \"$arg\" --with-hwloc`"
				;;
			--with-pintool=*)
				PINTOOL_PREFIX="`get_arg_value \"$arg\" --with-pintool`"
				;;
			--without-pintool)
				PINTOOL_PREFIX="NO"
				;;
			--with-numactl=*)
				NUMACTL_PREFIX="`get_arg_value \"$arg\" --with-numactl`"
				;;
			--show)
				ENABLE_DISPLAY_COMMAND='true'
				;;
			CC=*)
				EXTRA_CC="${val}"
				;;
			CXX=*)
				CFG_EXTRA_CXX="${val}"
				;;
			CFLAGS=*)
				cfg_add_to_var CFG_EXTRA_CFLAGS "${val}"
				;;
			CXXFLAGS=*)
				cfg_add_to_var CFG_EXTRA_CXXFLAGS "${val}"
				;;
			LDFLAGS=*)
				cfg_add_to_var CFG_EXTRA_LDFLAGS "${val}"
				;;
			*)
				cfg_parse_user_opts "$arg" || cfg_fail "Invalid argument : $arg, please check in --help."
				;;
		esac
	done
}

######################################################
cfg_push_defaults()
{
	cfg_push_cmake_opt "-DCMAKE_INSTALL_PREFIX=${CFG_DEFAULT_PREFIX}"
	cfg_push_cmake_opt "-DCMAKE_BUILD_TYPE=${CFG_DEFAULT_BUILD_TYPE}"
}

######################################################
# emulate tac in a portable way with awk
cfg_portable_tac()
{
	awk '{a[i++]=$0} END {for (j=i-1; j>=0;) print a[j--] }'
}

######################################################
# clean options by removing double definitions and keep only the
# last one. To proceed we reverse the file and keep definition
# only if not already seen
# - $1 : File to clean
cfg_remove_dup()
{
	#vars
	file="${1}"
	tmpfile="${file}.tmp"

	#prep
	touch "${tmpfile}"

	#loop on reversed file
	cat "${file}" | cfg_portable_tac | while read line
	do
		var=$(echo "${line}" | cut -f 1 -d =)

		#check if not already seen
		if ! egrep -q "^${var}=" "${tmpfile}" ; then
			echo "${line}" >> "${tmpfile}"
		fi
	done

	#reverback the file and replace orig
	cat "${tmpfile}" | cfg_portable_tac > "${file}"
}

######################################################
# Gen final command
cfg_gen_final_command_lines()
{
	echo "${CFG_CMAKE_COMMAND}"
	cat "${CFG_CMAKE_OPTS_FILE}" | while read line; do
		echo "\\\"${line}\\\""
	done
	echo ".."
}

######################################################
# Gen command
cfg_gen_command()
{
	cfg_gen_final_command_lines | xargs echo
}

######################################################
#push defults
cfg_push_defaults
#parse
cfg_parse_global_args "$@"
#clean
cfg_remove_dup "${CFG_CMAKE_OPTS_FILE}"

######################################################
#Check current directory
if [ -f 'CMakeLists.txt' ] && [ -f 'configure' ]; then
	echo "ERROR : CMake isn't adapted to support build directely in source"
	echo "directory. Prefer to create a subdirectory to build."
	echo ""
	echo "Example : mkdir build && cd build && ../configure"
	cfg_exit 1
fi

######################################################
#Gen CC/CXX/LDFLAGS commands
if [ ! -z "$CFG_EXTRA_CC" ];       then cfg_push_cmake_opt "-DCMAKE_C_COMPILER=${CFG_EXTRA_CC}"            ; fi
if [ ! -z "$CFG_EXTRA_CFLAGS" ];   then cfg_push_cmake_opt "-DCMAKE_C_FLAGS=${CFG_EXTRA_CFLAGS}"           ; fi
if [ ! -z "$CFG_EXTRA_CXX" ];      then cfg_push_cmake_opt "-DCMAKE_CXX_COMPILER=${CFG_EXTRA_CXX}"         ; fi
if [ ! -z "$CFG_EXTRA_CXXFLAGS" ]; then cfg_push_cmake_opt "-DCMAKE_CXX_FLAGS=${CFG_EXTRA_CXXFLAGS}"       ; fi
if [ ! -z "$CFG_EXTRA_LDFLAGS" ];  then cfg_push_cmake_opt "-DCMAKE_EXE_LINKER_FLAGS=${CFG_EXTRA_LDFLAGS}" ; fi
if [ ! -z "$CFG_EXTRA_LDFLAGS" ];  then cfg_push_cmake_opt "-DCMAKE_SHARED_LINKER_FLAGS=${CFG_EXTRA_LDFLAGS}" ; fi
if [ ! -z "$CFG_EXTRA_LDFLAGS" ];  then cfg_push_cmake_opt "-DCMAKE_STATIC_LINKER_FLAGS=${CFG_EXTRA_LDFLAGS}" ; fi

######################################################
if [ -z "$ENABLE_WEBVIEW" ] || [ "$ENABLE_WEBVIEW" = "-DENABLE_WEBVIEW=ON" ]
then
	if [ ! -d ${SOURCE_DIR}/src/webview/bower_components ] || [ ! -d ${SOURCE_DIR}/src/webview/deps ]
	then
		echo "You cloned the master branch, need to download GUI dependencies !"
		echo "....checking deps..."
		miss=""
		if ! which pip
		then
			echo "MISSING Python 'pip' command required to fetch the webview server dependencies, please install before proceeding or download a release archive instead of using master branch"
			miss="true"
		fi
		if ! which npm
		then
			echo "MISSING Nodejs 'npm' command required to fetch the webview client dependencies, please install 'nodejs' before proceeding or download a release archive instead of using master branch"
			echo "Alternatively you can download a release archive of numaprof which already contain all the javascript files and do not need NodeJS."
			miss="true"
		fi
		
		if [ ! -z "$miss" ]; then
			echo "If you cannot install them you can disable the webview with --disable-webview"
			cfg_exit 1
		fi
	fi
fi

######################################################
#if [ -z "${PINTOOL_PREFIX}" ]; then
#	echo "Missing pintool prefix, please provide path with --with-pintool=PREFIX"
#	cfg_exit 1
#fi

######################################################
#if [ ! -f ${PINTOOL_PREFIX}/pin ] && [ "${PINTOOL_PREFIX}" != "NO" ]; then
#	echo "Invalid path for pintool : $PINTOOL_PREFIX, please set with --with-pintool=PATH"
# 	cfg_exit 1
#fi

######################################################
#Gen final command
#COMMAND="`gen_clean_command "${CFG_CMAKE_COMMAND}" "-DCMAKE_BUILD_TYPE=${BUILD_TYPE}" "-DPINTOOL_PREFIX=${PINTOOL_PREFIX}" "${PREFIX}" "${EXTRA_CXX}" \
#	"${EXTRA_CXXFLAGS}" "${EXTRA_LDFLAGS}" "${EXTRA_CC}" "${EXTRA_CFLAGS}" \
#	"${ENABLE_SELF_TEST}" "${ENABLE_JUNIT_OUT}" "${ENABLE_VALGRIND}" "${ENABLE_GCC_COVERAGE}" "${DISABLE_TESTS}" \
#	"${LIB_SUFFIX}" "${HWLOC_PREFIX}" "${NUMACTL_PREFIX}" "${ENABLE_WEBVIEW}" "${MPI_CXX_COMPILER}" "${ENABLE_NINJA}" "${CFG_SOURCE_DIR}"`" 

######################################################
#execute or display
if [ "${ENABLE_DISPLAY_COMMAND}" = 'true' ]; then
	cfg_gen_command
	cfg_exit 0
else
	printf ">>> "
	cfg_gen_command
	eval "`cfg_gen_command`"
	cfg_exit $?
fi
